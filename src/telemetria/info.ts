import { NodeSDK } from '@opentelemetry/sdk-node';
import { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';
import { ConsoleMetricExporter, PeriodicExportingMetricReader, MeterProvider } from '@opentelemetry/sdk-metrics';
import { LoggerProvider, BatchLogRecordProcessor, ConsoleLogRecordExporter } from '@opentelemetry/sdk-logs';
import { PinoInstrumentation } from '@opentelemetry/instrumentation-pino';
import { MongoDBInstrumentation } from '@opentelemetry/instrumentation-mongodb';
import { FsInstrumentation } from '@opentelemetry/instrumentation-fs';
import { metrics } from '@opentelemetry/api';

const loggerProvider = new LoggerProvider();

const meterProvider = new MeterProvider({
  readers: [
    new PeriodicExportingMetricReader({
      exporter: new ConsoleMetricExporter(),
      exportIntervalMillis: 10000,
    }),
  ],
});

metrics.setGlobalMeterProvider(meterProvider);

const sdk = new NodeSDK({
  serviceName: 'internatura-backend',
  traceExporter: new ConsoleSpanExporter(),
  logRecordProcessor: new BatchLogRecordProcessor(
    new ConsoleLogRecordExporter()
  ),
  instrumentations: [
    new PinoInstrumentation(),
    new MongoDBInstrumentation({
      enhancedDatabaseReporting: true,
    }),
    new FsInstrumentation(),
  ],
});

sdk.start();
console.log('\n========================================');
console.log('‚úÖ OpenTelemetry —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
console.log('üìä –¢—Ä–µ–π—Å—ã, –º–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏ –±—É–¥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å');
console.log('========================================\n');

const meter = metrics.getMeter('test-meter');

const requestCounter = meter.createCounter('http.requests.total', {
  description: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤',
});

const responseTimeHistogram = meter.createHistogram('http.response.duration', {
  description: '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤',
  unit: 'ms',
});

const activeConnectionsGauge = meter.createUpDownCounter('http.active.connections', {
  description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
});

requestCounter.add(1, { method: 'INIT', status: 'started' });

console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ (5 —Å–µ–∫—É–Ω–¥)...\n');

process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await meterProvider.shutdown();
    await sdk.shutdown();
    console.log('‚úÖ OpenTelemetry –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ OpenTelemetry:', error);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await meterProvider.shutdown();
    await sdk.shutdown();
    console.log('‚úÖ OpenTelemetry –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ OpenTelemetry:', error);
    process.exit(1);
  }
});

process.on('unhandledRejection', async (reason: unknown) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  try {
    await meterProvider.shutdown();
    await sdk.shutdown();
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ OpenTelemetry:', error);
  }
  process.exit(1);
});

export { requestCounter, responseTimeHistogram, activeConnectionsGauge };
export default sdk;